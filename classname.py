import os
import sys
import time
import subprocess
import shutil


def append_line(file_name, line_num, text):
    lines = open(file_name, 'r').readlines()
    lines.insert(line_num,text)
    out = open(file_name, 'w')
    out.writelines(lines)
    out.close()


def remove_auto(file_name):
    lines = open(file_name, 'r').readlines()
    newLines = list()
    cont = False
    for lineNumber,line in enumerate(lines):
        if cont is False and "//AutoGeneratedClassName-start" in line:
            cont = True
            continue
        if cont is True and "//AutoGeneratedClassName-end" in line:
            cont = False
            continue
        if cont is True:
            continue
        newLines.append(line)
    out = open(file_name, 'w')
    out.writelines(newLines)
    out.close()

def findFiles(dir,type,exclude,array):
    for fname in os.listdir(dir):
        path = os.path.join(dir, fname)
        if os.path.isdir(path):      
            findFiles(path,type,exclude,array)
            
        if len(exclude) > 0:            
            if  hasLastPathComponent(path,type) and not inArray(exclude,path):
                array.append(path)
        elif type in path :
           array.append(path)

class StringBuffer:
    baseString = ""
    currentPos = 0

    def setBaseString(self, string):
        self.baseString = string

    def setPosFromSubString(self, string):
        try:
            self.currentPos = self.baseString.index(string) + len(string)

        except ValueError:
            print string + " not found in base-string : " + self.baseString
            raise ValueError()

    def readTillChar(self, expectedChar, toofarChar):
        substring = self.baseString[self.currentPos:]
        resultString = ""
        for char in substring:
            if char == expectedChar:
                break
            if char == toofarChar:
                print substring + " : went too far. tried to find " + expectedChar + " but found " + toofarChar
                resultString = ""
                break
            resultString = resultString + char
        return resultString



def transpileSize():
    array = list()
    findFiles("./ts",".ts","",array)
    for filepath in array:
        with open(filepath,'r' ) as f:
            in_file = f.readlines()
            namespace = ""
            classname = ""
            hasAlready = False
            hasAuto = False
            lineNumb = 0
            for lineNumber,line in enumerate(in_file):
                if "namespace" in line:
                    buffer = StringBuffer()
                    buffer.setBaseString(line)
                    buffer.setPosFromSubString("namespace")
                    namespace = buffer.readTillChar('{','(').strip()
                    continue
                if "//AutoGeneratedClassName-start" in line:
                    hasAuto = True
                    continue
                if "static classname" in line:
                    hasAlready = True
                if "@class" in line or "{" not in line:
                    continue
                if "class " in line and "<" in line:
                    continue
                
              
                if len(classname) == 0 and "class " in line and "{" in line:
                    buffer = StringBuffer()
                    buffer.setBaseString(line)
                    buffer.setPosFromSubString("class ")
                    lineNumb = lineNumber
                    if "extends " in line:
                        classname = buffer.readTillChar(" ", "{").strip()
                    elif "implements" in line:
                        classname = buffer.readTillChar(" ", "{").strip()
                    else:
                        classname = buffer.readTillChar("{", "(").strip()
                    
        if hasAuto is True:
            remove_auto(filepath)
        if hasAuto is False and hasAlready is True:
            break
        if len(namespace) > 0 and len(classname) > 0 and lineNumb != 0:   
            if "ViewController" in classname:
                        print classname
            append_line(filepath,lineNumb+1,'\t\t//AutoGeneratedClassName-start - do not eidt this line\n')
            append_line(filepath,lineNumb+2,'\t\tpublic static classname:string = "'+namespace+'.'+classname+'";\n')
            append_line(filepath,lineNumb+3,'\t\tpublic getClassName():string{return '+classname+'.classname;}\n')
            append_line(filepath,lineNumb+4,'\t\t//AutoGeneratedClassName-end - do not eidt this line\n')

transpileSize()