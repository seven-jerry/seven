namespace storyboard {
    export class SevenAdapter {
		//AutoGeneratedClassName-start - do not eidt this line
		public static classname:string = "storyboard.SevenAdapter";
		public getClassName():string{return SevenAdapter.classname;}
		//AutoGeneratedClassName-end - do not eidt this line
        initalScene:Scene;

        storyboardAdapter: StoryboardSideAdapter;
        registry: {} = {};
        loadedObjects:{}={};

        private static _instance: SevenAdapter;
        public static shared(): SevenAdapter {
            if (SevenAdapter._instance == undefined) {
                var inst = SevenAdapter._instance = new SevenAdapter();
                inst.storyboardAdapter = new StoryboardSideAdapter();
            }
            return SevenAdapter._instance;
        }

        public getObjectForId(id:string){
                return this.loadedObjects[id];
    
        }

        public registerForObjectID(id: string, callback: IObjectLoaded) {
            if (this.registry[id] == undefined) {
                this.registry[id] = new Array();
            }
            this.registry[id].push(callback);
        }
        public hasLoadedObject(object: Object) {
            this.loadedObjects[object.id] = object;
            if (this.registry[object.id] == undefined) {
                return;
            }
            for (let callback of this.registry[object.id]) {
                callback.hasLoadedObject(object.id, object);
            }
        }
        public getInitialScene():Scene{
           return this.storyboardAdapter.document.initialViewController.scene;
        }
    }

    export interface IObjectLoaded {
        hasLoadedObject(id: string, object: Object);
    }
}