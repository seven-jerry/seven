namespace storyboard{
    export class WindowLoader implements seven.IWindowLoader{
		//AutoGeneratedClassName-start - do not eidt this line
		public static classname:string = "storyboard.WindowLoader";
		public getClassName():string{return WindowLoader.classname;}
		//AutoGeneratedClassName-end - do not eidt this line

        windows:Array<seven.JMBWindow> = new Array<seven.JMBWindow>();
        setup(document: seven.JBDocument) {
            var scene = SevenAdapter.shared().getInitialScene();
            for(let object of scene.objects){
                if(object.getClassName() == "storyboard.ViewController"){
                    this.addWindowController(<ViewController>object);
                }
            }

            for(let window of this.windows){
                seven.JBDocument.document().addSubWindow(window);
            }
        }    

        loadWindows(sizeClass: seven.ISizeClass) {

        }

        private addWindowController(controller:ViewController){
            var style = SevenAdapter.shared().getObjectForId(controller.view.id);
            seven.Objects.requireNonNull("StyleProder must not be null",style);
            var window:seven.CanvasWindow = seven.CanvasWindow.new(controller.view.id,controller.view.getRect());
            window.view.setStyleProvider(style);
            this.addAsSubView(window.view,controller.view.subViews)
            this.windows.push(window);
        }
        private addAsSubView(superView:seven.View,objects:Array<Object>){
            objects.forEach(element => {
                var view = this.getSevenView(element);
                superView.addSubview(view);
            });
        }
        private getSevenView(object:Object):seven.View{
            if(object.getClassName() == TextField.classname){
                return new components.html.InputView(object.id).initWitFrame(object.getRect());
            }

            return new seven.HtmlElementView(object.id).initWitFrame(object.getRect());
            
            

        }
    }
}