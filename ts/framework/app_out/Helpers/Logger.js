var seven;
(function (seven) {
    class Logger {
        constructor() { }
        getClassName() { return seven.Logger.classname; }
        static only(args) {
            console.log(args);
            Logger.onlyFlag = true;
        }
        static log(args) {
            if (Logger.shouldLog() == false) {
                return;
            }
            var logMessage = Logger.toLogMessage(args);
            console.log(logMessage);
        }
        static develepor(args) {
            if (Logger.shouldLog() == false) {
                return;
            }
            var logMessage = Logger.toLogMessage(args);
            console.debug(logMessage);
        }
        static boot(args) {
            if (Logger.shouldLog() == false) {
                return;
            }
            var logMessage = Logger.toLogMessage(args);
            console.log(logMessage);
        }
        static develeporError(args) {
            if (Logger.shouldLog() == false) {
                return;
            }
            var logMessage = Logger.toLogMessage(args);
            console.error(logMessage);
        }
        static develeporInfo(args) {
            if (Logger.shouldLog() == false) {
                return;
            }
            var logMessage = Logger.toLogMessage(args);
            console.info(logMessage);
        }
        static error(errorText, showErrorDialog = false) {
            if (Logger.shouldLog() == false) {
                return;
            }
            console.error(errorText);
            if (showErrorDialog == false) {
                return;
            }
        }
        static shouldLog() {
            if (Logger.onlyFlag == true) {
                return false;
            }
            if (Logger.noLogging == true) {
                return false;
            }
        }
        static toLogMessage(args) {
            if (typeof args == "string") {
                return args;
            }
            var buildMessage = "";
            var elements = new Array();
            elements = elements.concat(args);
            elements.forEach(element => {
                if (typeof element == "object") {
                    buildMessage = buildMessage.concat(element.toString());
                }
                else {
                    buildMessage = buildMessage.concat(element);
                }
                buildMessage = buildMessage.concat(" , ");
            });
            return buildMessage;
        }
    }
    //AutoGeneratedClassName-start - do not eidt this line
    Logger.classname = "seven.Logger ";
    ///AutoGeneratedClassName-end - do not eidt this line
    Logger.onlyFlag = false;
    Logger.noLogging = false;
    seven.Logger = Logger;
})(seven || (seven = {}));
window.onerror = function (error) {
    seven.Logger.error(error.toString(), true);
};
