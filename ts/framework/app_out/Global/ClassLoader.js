//{INSERTORDER:10}
var seven;
(function (seven) {
    /**
     * the ClassLoader registers and loads classes
     */
    class ClassLoader {
        constructor() {
            ///AutoGeneratedClassName-end - do not eidt this line
            this.constructedClasses = {};
            this.loadClasses = new Array();
            this.priorityClass = Array();
            this.priorityClasses = {};
            this.afterClasses = {};
        }
        getClassName() { return seven.ClassLoader.classname; }
        static manager() {
            if (ClassLoader._instance == undefined) {
                ClassLoader._instance = new ClassLoader();
            }
            return ClassLoader._instance;
        }
        /**
         *
         * @param className the fully qualified className
         * <br/>
         * this method is normally defined in the global space and gets loaded when called from the document delegate
         * it is important that the class a has public static method called 'loadedInstance():thisRef'
         *
         */
        loadInstance(className) {
            this.loadClasses.push(className);
        }
        loadInstanceAtPriority(className, priority) {
            if (this.priorityClasses[priority] == undefined) {
                this.priorityClasses[priority] = new Array();
            }
            this.priorityClasses[priority].push(className);
        }
        startLoading() {
            var keys = Object.keys(this.priorityClasses).sort((a, b) => {
                return parseInt(a) - parseInt(b);
            });
            for (let key of keys) {
                for (let value of this.priorityClasses[key]) {
                    var classObject = eval(value + ".loadedInstance();");
                }
            }
            for (let className of this.loadClasses) {
                //  try {
                var classObject = eval(className + ".loadedInstance();");
                /*} catch (e) {
                    Logger.error("ClassLoader - No Class found for classname");
                }*/
            }
        }
        hasLoaded(classname) {
            this.constructedClasses[classname] = classname;
            if (this.afterClasses[classname] != undefined) {
                var classes = this.afterClasses[classname];
                if (classes == undefined) {
                    return;
                }
                for (let classObj of classes) {
                    this.loadInstance(classObj);
                }
            }
        }
        getLoadedInstance(classname) {
            this.constructedClasses[classname];
        }
        after(afterName, loadClassName) {
            if (this.afterClasses[afterName] == undefined) {
                this.afterClasses[afterName] = new Array();
            }
            var currentClasses = this.afterClasses[afterName];
            currentClasses.push(loadClassName);
            this.afterClasses[afterName] = currentClasses;
        }
    }
    //AutoGeneratedClassName-start - do not eidt this line
    ClassLoader.classname = "seven.ClassLoader ";
    seven.ClassLoader = ClassLoader;
})(seven || (seven = {}));
