var seven;
(function (seven) {
    class SizeCatalog {
        constructor(name) {
            this.classes = new Array();
            this.name = name;
        }
        getClassName() { return seven.SizeCatalog.classname; }
        setBaseClass(sizeClass) {
            this.baseClass = sizeClass;
            this.classes.push(this.baseClass);
        }
        setBaseClassById(id) {
            for (let sizeCLass of this.classes) {
                if (sizeCLass.getId() == id) {
                    this.setBaseClass(sizeCLass);
                    return;
                }
            }
        }
        getBaseClass() {
            return this.baseClass;
        }
        addSizeClasses(sizeCLasses) {
            for (let sizeCLass of sizeCLasses) {
                this.classes.push(sizeCLass);
            }
        }
        addSizeClass(sizeCLass) {
            this.classes.push(sizeCLass);
        }
        getSizeClasses() {
            return this.classes;
        }
        changeForSize(width, height) {
            if (width < this.baseClass.getWidth()) {
                this.currentSizeClass = this.findBiggestClass(width);
            }
            if (width > this.baseClass.getWidth()) {
                this.currentSizeClass = this.findSmallestClass(width);
            }
        }
        findBiggestClass(width) {
            var modulo = width % this.baseClass.getWidth();
            var runningClassObj = this.baseClass;
            for (var i in this.classes) {
                var classObj = this.classes[i];
                if (classObj.getWidth() > this.baseClass.getWidth()) {
                    continue;
                }
                if (classObj.getWidth() == width) {
                    return classObj;
                }
                if (width < classObj.getWidth() && width % classObj.getWidth() > modulo) {
                    runningClassObj = classObj;
                }
            }
            return runningClassObj;
        }
        findSmallestClass(width) {
            var baseClassDifference = width - this.baseClass.getWidth();
            var runningClassObj = this.baseClass;
            for (var i in this.classes) {
                var classObj = this.classes[i];
                if (classObj.getWidth() < this.baseClass.getWidth()) {
                    continue;
                }
                if (classObj.getWidth() == width) {
                    return classObj;
                }
                var currentClassDifference = width - classObj.getWidth();
                if (width > classObj.getWidth() && currentClassDifference < baseClassDifference) {
                    runningClassObj = classObj;
                }
            }
            return runningClassObj;
        }
        getName() {
            return this.name;
        }
        setName(name) {
            this.name = name;
        }
        getSizeClass() {
            return this.currentSizeClass || this.baseClass;
        }
    }
    //AutoGeneratedClassName-start - do not eidt this line
    SizeCatalog.classname = "seven.SizeCatalog";
    seven.SizeCatalog = SizeCatalog;
})(seven || (seven = {}));
