//{INSERTORDER:3}
/**
 * this class represents a HTMLCanvas
 *  rendering means positing the htmlelement on the screen
 * 
 */

namespace seven {
    export class HtmlCanvasView extends HtmlElementView {
        //AutoGeneratedClassName-start - do not eidt this line
        public static classname: string = "seven.HtmlCanvasView";
        public getClassName(): string { return HtmlCanvasView.classname; }
        //AutoGeneratedClassName-end - do not eidt this line
        canavsRect: Rect = Rect.empty();
        context: CanvasRenderingContext2D;
        element:HTMLCanvasElement;
       

        /**
         * 
         * @param canvasId the html-id of the canvas
         */
        constructor(canvasId: string) {
            super(canvasId);
            if (this.element) {
                if (this.element != undefined) {
                    this.context = this.element.getContext('2d');
                    Object.freeze(this.context);
                }
                return;
            }
        }

        drawInRect(rect: Rect) {
            super.drawInRect(rect);
            this.canavsRect = Rect.copyRect(rect);
            this.context.clearRect(0, 0, rect.width(), rect.height());
        }

        getContext() {
            return this.context;
        }

        remove(): void {
            super.remove();
        }

        addScreenOffset(): Orgin {
            return this.canavsRect.orgin();
        }

        protected getType():string{
            return "canvas";
        }

    }
}