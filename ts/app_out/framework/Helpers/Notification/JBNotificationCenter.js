var seven;
(function (seven) {
    class JBNotificationCenter {
        /* private */ constructor() {
            this.observers = new seven.JMBMap();
            this.priorityObservers = new seven.JMBMap();
        }
        getClassName() { return seven.JBNotificationCenter.classname; }
        static touchEventManager() {
            if (JBNotificationCenter._touchEventCenter == undefined) {
                JBNotificationCenter._touchEventCenter = new JBNotificationCenter();
            }
            return JBNotificationCenter._touchEventCenter;
        }
        static defaultCenter() {
            if (JBNotificationCenter._defaultManager == undefined) {
                JBNotificationCenter._defaultManager = new JBNotificationCenter();
            }
            return JBNotificationCenter._defaultManager;
        }
        addObserverForName(name, observer, priority) {
            if (priority != undefined) {
                if (this.priorityObservers.containsKey(name) == false) {
                    this.priorityObservers.put(name, new seven.JMBMap());
                }
                var observerMap = this.priorityObservers.get(name);
                if (observerMap.containsKey(priority) == false) {
                    observerMap.put(priority, new Array());
                }
                var observers = observerMap.get(priority);
                var found = false;
                for (let everyObserver of observers) {
                    if (everyObserver.thisRef == observer.thisRef) {
                        found = true;
                    }
                }
                if (found == false) {
                    observers.push(observer);
                }
                return;
            }
            if (this.observers.containsKey(name) == false) {
                this.observers.put(name, new Array());
            }
            var observerArray = this.observers.get(name);
            var found = false;
            for (let everyObserver of observerArray) {
                if (everyObserver.thisRef == observer.thisRef) {
                    found = true;
                }
            }
            if (found == false) {
                observerArray.push(observer);
            }
        }
        postNotificationForName(name, userInfo) {
            this.postPriority(name, userInfo);
            var observerValues = this.observers.get(name);
            for (let observer of observerValues) {
                //call the observer method with userInfo 
                if (observer.userInfo) {
                    observer.method.call(observer.thisRef, userInfo);
                }
                else {
                    observer.method.call(observer.thisRef);
                }
            }
        }
        postPriority(name, userInfo) {
            var priorityMap = this.priorityObservers.get(name);
            if (priorityMap == undefined) {
                return;
            }
            var priorities = priorityMap.keys().sort((a, b) => {
                return a - b;
            });
            for (var prorityKey of priorities) {
                var values = priorityMap.get(prorityKey);
                for (let observer of values) {
                    //call the observer method with userInfo 
                    if (observer.userInfo) {
                        observer.method.call(observer.thisRef, userInfo);
                    }
                    else {
                        observer.method.call(observer.thisRef);
                    }
                }
            }
        }
        removeObserver(observerThis, name) {
            var observerValues = this.observers.get(name);
            for (var key in observerValues) {
                if (observerValues[key].thisRef == observerThis) {
                    delete observerValues[key];
                }
            }
        }
    }
    //AutoGeneratedClassName-start - do not eidt this line
    JBNotificationCenter.classname = "seven.JBNotificationCenter ";
    seven.JBNotificationCenter = JBNotificationCenter;
})(seven || (seven = {}));
